# Use a Go base image
FROM golang:1.23-alpine as builder

# Set the current working directory inside the container
WORKDIR /app

# Copy the Go module files
COPY go.mod go.sum ./

# Download the Go modules
RUN go mod download

# Copy the rest of the code
COPY . .

# Build the Go binary
RUN go build -o backend .

# Use a smaller image to run the application
FROM alpine:latest

# Set the working directory inside the container
WORKDIR /root/

# Install any dependencies needed for migrations (e.g., bash, psql)
RUN apk update && apk add --no-cache bash postgresql-client

# Copy the backend binary and the wait-for-it script
COPY --from=builder /app/backend .
COPY wait-for-it.sh /usr/local/bin/wait-for-it

# Copy the migration script (migrations.sql) from builder stage
COPY --from=builder /app/migrations.sql /app/migrations.sql

# Expose the port your app runs on (8080 for Gin)
EXPOSE 8080

# Set entrypoint to run the migration followed by the app startup
CMD bash -c "export PGPASSWORD=$DB_PASSWORD && psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f /app/migrations.sql && ./backend"

# Use wait-for-it to wait for the database to be available before starting the backend
CMD ["sh", "-c", "wait-for-it db:5432 --timeout=0 -- ./backend"]